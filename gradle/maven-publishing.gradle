apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    withJavadocJar()
    withSourcesJar()
}
//
//artifacts {
//    archives javadocJar, sourcesJar
//}

ext {
    publishedGroupId = 'com.vgaidarji'
    libraryName = 'dependencies-overview'
    artifact = 'dependencies-overview'
    libraryVersion = '1.0.0.9'
    libraryDescription = 'Generates project dependencies overview report (JSON, Markdown, etc.) from project dependencies'

    siteUrl = 'https://github.com/vgaidarji/dependencies-overview'
    gitUrl = 'https://github.com/vgaidarji/dependencies-overview.git'
    gitUrlNoHttps = 'github.com/vgaidarji/dependencies-overview.git'
    issuesUrl = 'https://github.com/vgaidarji/dependencies-overview/issues'

    developerId = 'vgaidarji'
    developerName = 'Veaceslav Gaidarji'
    developerEmail = 'veaceslav.gaidarji@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId = publishedGroupId
            artifactId = artifact
            version = libraryVersion

            artifacts = [javadocJar, sourcesJar]
            from components.java

            pom {
                name = libraryName
                description = libraryDescription
                url = siteUrl
                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                    }
                }
                scm {
                    connection = "scm:git:git://$gitUrlNoHttps"
                    developerConnection = "scm:git:ssh://git@$gitUrlNoHttps"
                    url = gitUrl
                }
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

//Properties properties = new Properties()
//File localProperties = new File('local.properties')
//if (localProperties.isFile()) {
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//} else {
//    println 'local.properties file not found.'
//}

//// upload to bintray
//bintray {
//    user = properties.hasProperty("bintray.user") ? properties.getProperty("bintray.user") : System.getenv('BINTRAY_USER')
//    key = properties.hasProperty("bintray.apikey") ? properties.getProperty("bintray.apikey") : System.getenv('BINTRAY_API_KEY')
//    configurations = ['archives']
//    pkg {
//        repo = bintrayRepo
//        name = bintrayName
//        desc = libraryDescription
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        issueTrackerUrl = issuesUrl
//        licenses = allLicenses
//        publish = true
//        publicDownloadNumbers = true
//        version {
//            name = libraryVersion
//            desc = libraryDescription
//            gpg {
//                sign = true
//                passphrase = properties.hasProperty("bintray.gpg.passphrase") ? properties.getProperty("bintray.gpg.passphrase") : System.getenv('BINTRAY_GPG_PASSPHRASE')
//            }
//        }
//    }
//}
